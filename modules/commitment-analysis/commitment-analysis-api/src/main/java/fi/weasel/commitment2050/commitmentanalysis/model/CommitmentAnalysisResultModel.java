/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package fi.weasel.commitment2050.commitmentanalysis.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the CommitmentAnalysisResult service. Represents a row in the &quot;CA_Results&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link fi.weasel.commitment2050.commitmentanalysis.model.impl.CommitmentAnalysisResultModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link fi.weasel.commitment2050.commitmentanalysis.model.impl.CommitmentAnalysisResultImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CommitmentAnalysisResult
 * @see fi.weasel.commitment2050.commitmentanalysis.model.impl.CommitmentAnalysisResultImpl
 * @see fi.weasel.commitment2050.commitmentanalysis.model.impl.CommitmentAnalysisResultModelImpl
 * @generated
 */
@ProviderType
public interface CommitmentAnalysisResultModel extends BaseModel<CommitmentAnalysisResult> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a commitment analysis result model instance should use the {@link CommitmentAnalysisResult} interface instead.
	 */

	/**
	 * Returns the primary key of this commitment analysis result.
	 *
	 * @return the primary key of this commitment analysis result
	 */
	public String getPrimaryKey();

	/**
	 * Sets the primary key of this commitment analysis result.
	 *
	 * @param primaryKey the primary key of this commitment analysis result
	 */
	public void setPrimaryKey(String primaryKey);

	/**
	 * Returns the ID of this commitment analysis result.
	 *
	 * @return the ID of this commitment analysis result
	 */
	@AutoEscape
	public String getId();

	/**
	 * Sets the ID of this commitment analysis result.
	 *
	 * @param id the ID of this commitment analysis result
	 */
	public void setId(String id);

	/**
	 * Returns the result type of this commitment analysis result.
	 *
	 * @return the result type of this commitment analysis result
	 */
	@AutoEscape
	public String getResultType();

	/**
	 * Sets the result type of this commitment analysis result.
	 *
	 * @param resultType the result type of this commitment analysis result
	 */
	public void setResultType(String resultType);

	/**
	 * Returns the result data of this commitment analysis result.
	 *
	 * @return the result data of this commitment analysis result
	 */
	@AutoEscape
	public String getResultData();

	/**
	 * Sets the result data of this commitment analysis result.
	 *
	 * @param resultData the result data of this commitment analysis result
	 */
	public void setResultData(String resultData);

	/**
	 * Returns the calculated of this commitment analysis result.
	 *
	 * @return the calculated of this commitment analysis result
	 */
	public Date getCalculated();

	/**
	 * Sets the calculated of this commitment analysis result.
	 *
	 * @param calculated the calculated of this commitment analysis result
	 */
	public void setCalculated(Date calculated);

	/**
	 * Returns the success of this commitment analysis result.
	 *
	 * @return the success of this commitment analysis result
	 */
	public boolean getSuccess();

	/**
	 * Returns <code>true</code> if this commitment analysis result is success.
	 *
	 * @return <code>true</code> if this commitment analysis result is success; <code>false</code> otherwise
	 */
	public boolean isSuccess();

	/**
	 * Sets whether this commitment analysis result is success.
	 *
	 * @param success the success of this commitment analysis result
	 */
	public void setSuccess(boolean success);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(CommitmentAnalysisResult commitmentAnalysisResult);

	@Override
	public int hashCode();

	@Override
	public CacheModel<CommitmentAnalysisResult> toCacheModel();

	@Override
	public CommitmentAnalysisResult toEscapedModel();

	@Override
	public CommitmentAnalysisResult toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}