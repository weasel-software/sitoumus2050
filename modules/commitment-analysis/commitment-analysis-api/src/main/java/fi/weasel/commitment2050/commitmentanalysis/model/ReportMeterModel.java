/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package fi.weasel.commitment2050.commitmentanalysis.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

/**
 * The base model interface for the ReportMeter service. Represents a row in the &quot;CA_ReportMeter&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link fi.weasel.commitment2050.commitmentanalysis.model.impl.ReportMeterModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link fi.weasel.commitment2050.commitmentanalysis.model.impl.ReportMeterImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ReportMeter
 * @see fi.weasel.commitment2050.commitmentanalysis.model.impl.ReportMeterImpl
 * @see fi.weasel.commitment2050.commitmentanalysis.model.impl.ReportMeterModelImpl
 * @generated
 */
@ProviderType
public interface ReportMeterModel extends BaseModel<ReportMeter> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a report meter model instance should use the {@link ReportMeter} interface instead.
	 */

	/**
	 * Returns the primary key of this report meter.
	 *
	 * @return the primary key of this report meter
	 */
	public String getPrimaryKey();

	/**
	 * Sets the primary key of this report meter.
	 *
	 * @param primaryKey the primary key of this report meter
	 */
	public void setPrimaryKey(String primaryKey);

	/**
	 * Returns the ID of this report meter.
	 *
	 * @return the ID of this report meter
	 */
	@AutoEscape
	public String getId();

	/**
	 * Sets the ID of this report meter.
	 *
	 * @param id the ID of this report meter
	 */
	public void setId(String id);

	/**
	 * Returns the commitment ID of this report meter.
	 *
	 * @return the commitment ID of this report meter
	 */
	@AutoEscape
	public String getCommitmentId();

	/**
	 * Sets the commitment ID of this report meter.
	 *
	 * @param commitmentId the commitment ID of this report meter
	 */
	public void setCommitmentId(String commitmentId);

	/**
	 * Returns the operation ID of this report meter.
	 *
	 * @return the operation ID of this report meter
	 */
	@AutoEscape
	public String getOperationId();

	/**
	 * Sets the operation ID of this report meter.
	 *
	 * @param operationId the operation ID of this report meter
	 */
	public void setOperationId(String operationId);

	/**
	 * Returns the report ID of this report meter.
	 *
	 * @return the report ID of this report meter
	 */
	@AutoEscape
	public String getReportId();

	/**
	 * Sets the report ID of this report meter.
	 *
	 * @param reportId the report ID of this report meter
	 */
	public void setReportId(String reportId);

	/**
	 * Returns the meter ID of this report meter.
	 *
	 * @return the meter ID of this report meter
	 */
	@AutoEscape
	public String getMeterId();

	/**
	 * Sets the meter ID of this report meter.
	 *
	 * @param meterId the meter ID of this report meter
	 */
	public void setMeterId(String meterId);

	/**
	 * Returns the meter category of this report meter.
	 *
	 * @return the meter category of this report meter
	 */
	@AutoEscape
	public String getMeterCategory();

	/**
	 * Sets the meter category of this report meter.
	 *
	 * @param meterCategory the meter category of this report meter
	 */
	public void setMeterCategory(String meterCategory);

	/**
	 * Returns the meter chart type of this report meter.
	 *
	 * @return the meter chart type of this report meter
	 */
	@AutoEscape
	public String getMeterChartType();

	/**
	 * Sets the meter chart type of this report meter.
	 *
	 * @param meterChartType the meter chart type of this report meter
	 */
	public void setMeterChartType(String meterChartType);

	/**
	 * Returns the meter value type of this report meter.
	 *
	 * @return the meter value type of this report meter
	 */
	@AutoEscape
	public String getMeterValueType();

	/**
	 * Sets the meter value type of this report meter.
	 *
	 * @param meterValueType the meter value type of this report meter
	 */
	public void setMeterValueType(String meterValueType);

	/**
	 * Returns the meter type fi of this report meter.
	 *
	 * @return the meter type fi of this report meter
	 */
	@AutoEscape
	public String getMeterTypeFI();

	/**
	 * Sets the meter type fi of this report meter.
	 *
	 * @param meterTypeFI the meter type fi of this report meter
	 */
	public void setMeterTypeFI(String meterTypeFI);

	/**
	 * Returns the meter type sv of this report meter.
	 *
	 * @return the meter type sv of this report meter
	 */
	@AutoEscape
	public String getMeterTypeSV();

	/**
	 * Sets the meter type sv of this report meter.
	 *
	 * @param meterTypeSV the meter type sv of this report meter
	 */
	public void setMeterTypeSV(String meterTypeSV);

	/**
	 * Returns the meter type en of this report meter.
	 *
	 * @return the meter type en of this report meter
	 */
	@AutoEscape
	public String getMeterTypeEN();

	/**
	 * Sets the meter type en of this report meter.
	 *
	 * @param meterTypeEN the meter type en of this report meter
	 */
	public void setMeterTypeEN(String meterTypeEN);

	/**
	 * Returns the current level of this report meter.
	 *
	 * @return the current level of this report meter
	 */
	@AutoEscape
	public String getCurrentLevel();

	/**
	 * Sets the current level of this report meter.
	 *
	 * @param currentLevel the current level of this report meter
	 */
	public void setCurrentLevel(String currentLevel);

	/**
	 * Returns the starting level of this report meter.
	 *
	 * @return the starting level of this report meter
	 */
	@AutoEscape
	public String getStartingLevel();

	/**
	 * Sets the starting level of this report meter.
	 *
	 * @param startingLevel the starting level of this report meter
	 */
	public void setStartingLevel(String startingLevel);

	/**
	 * Returns the target level of this report meter.
	 *
	 * @return the target level of this report meter
	 */
	@AutoEscape
	public String getTargetLevel();

	/**
	 * Sets the target level of this report meter.
	 *
	 * @param targetLevel the target level of this report meter
	 */
	public void setTargetLevel(String targetLevel);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(ReportMeter reportMeter);

	@Override
	public int hashCode();

	@Override
	public CacheModel<ReportMeter> toCacheModel();

	@Override
	public ReportMeter toEscapedModel();

	@Override
	public ReportMeter toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}