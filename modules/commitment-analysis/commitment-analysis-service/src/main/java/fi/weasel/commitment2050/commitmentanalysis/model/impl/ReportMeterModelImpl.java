/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package fi.weasel.commitment2050.commitmentanalysis.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import fi.weasel.commitment2050.commitmentanalysis.model.ReportMeter;
import fi.weasel.commitment2050.commitmentanalysis.model.ReportMeterModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ReportMeter service. Represents a row in the &quot;CA_ReportMeter&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ReportMeterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ReportMeterImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ReportMeterImpl
 * @see ReportMeter
 * @see ReportMeterModel
 * @generated
 */
@ProviderType
public class ReportMeterModelImpl extends BaseModelImpl<ReportMeter>
	implements ReportMeterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a report meter model instance should use the {@link ReportMeter} interface instead.
	 */
	public static final String TABLE_NAME = "CA_ReportMeter";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.VARCHAR },
			{ "commitmentId", Types.VARCHAR },
			{ "operationId", Types.VARCHAR },
			{ "reportId", Types.VARCHAR },
			{ "meterId", Types.VARCHAR },
			{ "meterCategory", Types.VARCHAR },
			{ "meterChartType", Types.VARCHAR },
			{ "meterValueType", Types.VARCHAR },
			{ "meterTypeFI", Types.VARCHAR },
			{ "meterTypeSV", Types.VARCHAR },
			{ "meterTypeEN", Types.VARCHAR },
			{ "currentLevel", Types.VARCHAR },
			{ "startingLevel", Types.VARCHAR },
			{ "targetLevel", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("commitmentId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("operationId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reportId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("meterId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("meterCategory", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("meterChartType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("meterValueType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("meterTypeFI", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("meterTypeSV", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("meterTypeEN", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("currentLevel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startingLevel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("targetLevel", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table CA_ReportMeter (id VARCHAR(75) not null primary key,commitmentId VARCHAR(75) null,operationId VARCHAR(75) null,reportId VARCHAR(75) null,meterId VARCHAR(75) null,meterCategory VARCHAR(75) null,meterChartType VARCHAR(75) null,meterValueType VARCHAR(75) null,meterTypeFI STRING null,meterTypeSV STRING null,meterTypeEN STRING null,currentLevel STRING null,startingLevel STRING null,targetLevel STRING null)";
	public static final String TABLE_SQL_DROP = "drop table CA_ReportMeter";
	public static final String ORDER_BY_JPQL = " ORDER BY reportMeter.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CA_ReportMeter.id ASC";
	public static final String DATA_SOURCE = "caDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(fi.weasel.commitment2050.commitmentanalysis.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.fi.weasel.commitment2050.commitmentanalysis.model.ReportMeter"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(fi.weasel.commitment2050.commitmentanalysis.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.fi.weasel.commitment2050.commitmentanalysis.model.ReportMeter"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(fi.weasel.commitment2050.commitmentanalysis.service.util.ServiceProps.get(
				"lock.expiration.time.fi.weasel.commitment2050.commitmentanalysis.model.ReportMeter"));

	public ReportMeterModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return ReportMeter.class;
	}

	@Override
	public String getModelClassName() {
		return ReportMeter.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("commitmentId", getCommitmentId());
		attributes.put("operationId", getOperationId());
		attributes.put("reportId", getReportId());
		attributes.put("meterId", getMeterId());
		attributes.put("meterCategory", getMeterCategory());
		attributes.put("meterChartType", getMeterChartType());
		attributes.put("meterValueType", getMeterValueType());
		attributes.put("meterTypeFI", getMeterTypeFI());
		attributes.put("meterTypeSV", getMeterTypeSV());
		attributes.put("meterTypeEN", getMeterTypeEN());
		attributes.put("currentLevel", getCurrentLevel());
		attributes.put("startingLevel", getStartingLevel());
		attributes.put("targetLevel", getTargetLevel());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String id = (String)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String commitmentId = (String)attributes.get("commitmentId");

		if (commitmentId != null) {
			setCommitmentId(commitmentId);
		}

		String operationId = (String)attributes.get("operationId");

		if (operationId != null) {
			setOperationId(operationId);
		}

		String reportId = (String)attributes.get("reportId");

		if (reportId != null) {
			setReportId(reportId);
		}

		String meterId = (String)attributes.get("meterId");

		if (meterId != null) {
			setMeterId(meterId);
		}

		String meterCategory = (String)attributes.get("meterCategory");

		if (meterCategory != null) {
			setMeterCategory(meterCategory);
		}

		String meterChartType = (String)attributes.get("meterChartType");

		if (meterChartType != null) {
			setMeterChartType(meterChartType);
		}

		String meterValueType = (String)attributes.get("meterValueType");

		if (meterValueType != null) {
			setMeterValueType(meterValueType);
		}

		String meterTypeFI = (String)attributes.get("meterTypeFI");

		if (meterTypeFI != null) {
			setMeterTypeFI(meterTypeFI);
		}

		String meterTypeSV = (String)attributes.get("meterTypeSV");

		if (meterTypeSV != null) {
			setMeterTypeSV(meterTypeSV);
		}

		String meterTypeEN = (String)attributes.get("meterTypeEN");

		if (meterTypeEN != null) {
			setMeterTypeEN(meterTypeEN);
		}

		String currentLevel = (String)attributes.get("currentLevel");

		if (currentLevel != null) {
			setCurrentLevel(currentLevel);
		}

		String startingLevel = (String)attributes.get("startingLevel");

		if (startingLevel != null) {
			setStartingLevel(startingLevel);
		}

		String targetLevel = (String)attributes.get("targetLevel");

		if (targetLevel != null) {
			setTargetLevel(targetLevel);
		}
	}

	@Override
	public String getId() {
		if (_id == null) {
			return StringPool.BLANK;
		}
		else {
			return _id;
		}
	}

	@Override
	public void setId(String id) {
		_id = id;
	}

	@Override
	public String getCommitmentId() {
		if (_commitmentId == null) {
			return StringPool.BLANK;
		}
		else {
			return _commitmentId;
		}
	}

	@Override
	public void setCommitmentId(String commitmentId) {
		_commitmentId = commitmentId;
	}

	@Override
	public String getOperationId() {
		if (_operationId == null) {
			return StringPool.BLANK;
		}
		else {
			return _operationId;
		}
	}

	@Override
	public void setOperationId(String operationId) {
		_operationId = operationId;
	}

	@Override
	public String getReportId() {
		if (_reportId == null) {
			return StringPool.BLANK;
		}
		else {
			return _reportId;
		}
	}

	@Override
	public void setReportId(String reportId) {
		_reportId = reportId;
	}

	@Override
	public String getMeterId() {
		if (_meterId == null) {
			return StringPool.BLANK;
		}
		else {
			return _meterId;
		}
	}

	@Override
	public void setMeterId(String meterId) {
		_meterId = meterId;
	}

	@Override
	public String getMeterCategory() {
		if (_meterCategory == null) {
			return StringPool.BLANK;
		}
		else {
			return _meterCategory;
		}
	}

	@Override
	public void setMeterCategory(String meterCategory) {
		_meterCategory = meterCategory;
	}

	@Override
	public String getMeterChartType() {
		if (_meterChartType == null) {
			return StringPool.BLANK;
		}
		else {
			return _meterChartType;
		}
	}

	@Override
	public void setMeterChartType(String meterChartType) {
		_meterChartType = meterChartType;
	}

	@Override
	public String getMeterValueType() {
		if (_meterValueType == null) {
			return StringPool.BLANK;
		}
		else {
			return _meterValueType;
		}
	}

	@Override
	public void setMeterValueType(String meterValueType) {
		_meterValueType = meterValueType;
	}

	@Override
	public String getMeterTypeFI() {
		if (_meterTypeFI == null) {
			return StringPool.BLANK;
		}
		else {
			return _meterTypeFI;
		}
	}

	@Override
	public void setMeterTypeFI(String meterTypeFI) {
		_meterTypeFI = meterTypeFI;
	}

	@Override
	public String getMeterTypeSV() {
		if (_meterTypeSV == null) {
			return StringPool.BLANK;
		}
		else {
			return _meterTypeSV;
		}
	}

	@Override
	public void setMeterTypeSV(String meterTypeSV) {
		_meterTypeSV = meterTypeSV;
	}

	@Override
	public String getMeterTypeEN() {
		if (_meterTypeEN == null) {
			return StringPool.BLANK;
		}
		else {
			return _meterTypeEN;
		}
	}

	@Override
	public void setMeterTypeEN(String meterTypeEN) {
		_meterTypeEN = meterTypeEN;
	}

	@Override
	public String getCurrentLevel() {
		if (_currentLevel == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentLevel;
		}
	}

	@Override
	public void setCurrentLevel(String currentLevel) {
		_currentLevel = currentLevel;
	}

	@Override
	public String getStartingLevel() {
		if (_startingLevel == null) {
			return StringPool.BLANK;
		}
		else {
			return _startingLevel;
		}
	}

	@Override
	public void setStartingLevel(String startingLevel) {
		_startingLevel = startingLevel;
	}

	@Override
	public String getTargetLevel() {
		if (_targetLevel == null) {
			return StringPool.BLANK;
		}
		else {
			return _targetLevel;
		}
	}

	@Override
	public void setTargetLevel(String targetLevel) {
		_targetLevel = targetLevel;
	}

	@Override
	public ReportMeter toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ReportMeter)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ReportMeterImpl reportMeterImpl = new ReportMeterImpl();

		reportMeterImpl.setId(getId());
		reportMeterImpl.setCommitmentId(getCommitmentId());
		reportMeterImpl.setOperationId(getOperationId());
		reportMeterImpl.setReportId(getReportId());
		reportMeterImpl.setMeterId(getMeterId());
		reportMeterImpl.setMeterCategory(getMeterCategory());
		reportMeterImpl.setMeterChartType(getMeterChartType());
		reportMeterImpl.setMeterValueType(getMeterValueType());
		reportMeterImpl.setMeterTypeFI(getMeterTypeFI());
		reportMeterImpl.setMeterTypeSV(getMeterTypeSV());
		reportMeterImpl.setMeterTypeEN(getMeterTypeEN());
		reportMeterImpl.setCurrentLevel(getCurrentLevel());
		reportMeterImpl.setStartingLevel(getStartingLevel());
		reportMeterImpl.setTargetLevel(getTargetLevel());

		reportMeterImpl.resetOriginalValues();

		return reportMeterImpl;
	}

	@Override
	public int compareTo(ReportMeter reportMeter) {
		String primaryKey = reportMeter.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ReportMeter)) {
			return false;
		}

		ReportMeter reportMeter = (ReportMeter)obj;

		String primaryKey = reportMeter.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ReportMeter> toCacheModel() {
		ReportMeterCacheModel reportMeterCacheModel = new ReportMeterCacheModel();

		reportMeterCacheModel.id = getId();

		String id = reportMeterCacheModel.id;

		if ((id != null) && (id.length() == 0)) {
			reportMeterCacheModel.id = null;
		}

		reportMeterCacheModel.commitmentId = getCommitmentId();

		String commitmentId = reportMeterCacheModel.commitmentId;

		if ((commitmentId != null) && (commitmentId.length() == 0)) {
			reportMeterCacheModel.commitmentId = null;
		}

		reportMeterCacheModel.operationId = getOperationId();

		String operationId = reportMeterCacheModel.operationId;

		if ((operationId != null) && (operationId.length() == 0)) {
			reportMeterCacheModel.operationId = null;
		}

		reportMeterCacheModel.reportId = getReportId();

		String reportId = reportMeterCacheModel.reportId;

		if ((reportId != null) && (reportId.length() == 0)) {
			reportMeterCacheModel.reportId = null;
		}

		reportMeterCacheModel.meterId = getMeterId();

		String meterId = reportMeterCacheModel.meterId;

		if ((meterId != null) && (meterId.length() == 0)) {
			reportMeterCacheModel.meterId = null;
		}

		reportMeterCacheModel.meterCategory = getMeterCategory();

		String meterCategory = reportMeterCacheModel.meterCategory;

		if ((meterCategory != null) && (meterCategory.length() == 0)) {
			reportMeterCacheModel.meterCategory = null;
		}

		reportMeterCacheModel.meterChartType = getMeterChartType();

		String meterChartType = reportMeterCacheModel.meterChartType;

		if ((meterChartType != null) && (meterChartType.length() == 0)) {
			reportMeterCacheModel.meterChartType = null;
		}

		reportMeterCacheModel.meterValueType = getMeterValueType();

		String meterValueType = reportMeterCacheModel.meterValueType;

		if ((meterValueType != null) && (meterValueType.length() == 0)) {
			reportMeterCacheModel.meterValueType = null;
		}

		reportMeterCacheModel.meterTypeFI = getMeterTypeFI();

		String meterTypeFI = reportMeterCacheModel.meterTypeFI;

		if ((meterTypeFI != null) && (meterTypeFI.length() == 0)) {
			reportMeterCacheModel.meterTypeFI = null;
		}

		reportMeterCacheModel.meterTypeSV = getMeterTypeSV();

		String meterTypeSV = reportMeterCacheModel.meterTypeSV;

		if ((meterTypeSV != null) && (meterTypeSV.length() == 0)) {
			reportMeterCacheModel.meterTypeSV = null;
		}

		reportMeterCacheModel.meterTypeEN = getMeterTypeEN();

		String meterTypeEN = reportMeterCacheModel.meterTypeEN;

		if ((meterTypeEN != null) && (meterTypeEN.length() == 0)) {
			reportMeterCacheModel.meterTypeEN = null;
		}

		reportMeterCacheModel.currentLevel = getCurrentLevel();

		String currentLevel = reportMeterCacheModel.currentLevel;

		if ((currentLevel != null) && (currentLevel.length() == 0)) {
			reportMeterCacheModel.currentLevel = null;
		}

		reportMeterCacheModel.startingLevel = getStartingLevel();

		String startingLevel = reportMeterCacheModel.startingLevel;

		if ((startingLevel != null) && (startingLevel.length() == 0)) {
			reportMeterCacheModel.startingLevel = null;
		}

		reportMeterCacheModel.targetLevel = getTargetLevel();

		String targetLevel = reportMeterCacheModel.targetLevel;

		if ((targetLevel != null) && (targetLevel.length() == 0)) {
			reportMeterCacheModel.targetLevel = null;
		}

		return reportMeterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", commitmentId=");
		sb.append(getCommitmentId());
		sb.append(", operationId=");
		sb.append(getOperationId());
		sb.append(", reportId=");
		sb.append(getReportId());
		sb.append(", meterId=");
		sb.append(getMeterId());
		sb.append(", meterCategory=");
		sb.append(getMeterCategory());
		sb.append(", meterChartType=");
		sb.append(getMeterChartType());
		sb.append(", meterValueType=");
		sb.append(getMeterValueType());
		sb.append(", meterTypeFI=");
		sb.append(getMeterTypeFI());
		sb.append(", meterTypeSV=");
		sb.append(getMeterTypeSV());
		sb.append(", meterTypeEN=");
		sb.append(getMeterTypeEN());
		sb.append(", currentLevel=");
		sb.append(getCurrentLevel());
		sb.append(", startingLevel=");
		sb.append(getStartingLevel());
		sb.append(", targetLevel=");
		sb.append(getTargetLevel());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append(
			"fi.weasel.commitment2050.commitmentanalysis.model.ReportMeter");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commitmentId</column-name><column-value><![CDATA[");
		sb.append(getCommitmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>operationId</column-name><column-value><![CDATA[");
		sb.append(getOperationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reportId</column-name><column-value><![CDATA[");
		sb.append(getReportId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>meterId</column-name><column-value><![CDATA[");
		sb.append(getMeterId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>meterCategory</column-name><column-value><![CDATA[");
		sb.append(getMeterCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>meterChartType</column-name><column-value><![CDATA[");
		sb.append(getMeterChartType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>meterValueType</column-name><column-value><![CDATA[");
		sb.append(getMeterValueType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>meterTypeFI</column-name><column-value><![CDATA[");
		sb.append(getMeterTypeFI());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>meterTypeSV</column-name><column-value><![CDATA[");
		sb.append(getMeterTypeSV());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>meterTypeEN</column-name><column-value><![CDATA[");
		sb.append(getMeterTypeEN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentLevel</column-name><column-value><![CDATA[");
		sb.append(getCurrentLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startingLevel</column-name><column-value><![CDATA[");
		sb.append(getStartingLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>targetLevel</column-name><column-value><![CDATA[");
		sb.append(getTargetLevel());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ReportMeter.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ReportMeter.class
		};
	private String _id;
	private String _commitmentId;
	private String _operationId;
	private String _reportId;
	private String _meterId;
	private String _meterCategory;
	private String _meterChartType;
	private String _meterValueType;
	private String _meterTypeFI;
	private String _meterTypeSV;
	private String _meterTypeEN;
	private String _currentLevel;
	private String _startingLevel;
	private String _targetLevel;
	private ReportMeter _escapedModel;
}