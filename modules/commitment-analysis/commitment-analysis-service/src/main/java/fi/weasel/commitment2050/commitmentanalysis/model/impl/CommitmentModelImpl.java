/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package fi.weasel.commitment2050.commitmentanalysis.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import fi.weasel.commitment2050.commitmentanalysis.model.Commitment;
import fi.weasel.commitment2050.commitmentanalysis.model.CommitmentModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Commitment service. Represents a row in the &quot;CA_Commitment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CommitmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CommitmentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CommitmentImpl
 * @see Commitment
 * @see CommitmentModel
 * @generated
 */
@ProviderType
public class CommitmentModelImpl extends BaseModelImpl<Commitment>
	implements CommitmentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a commitment model instance should use the {@link Commitment} interface instead.
	 */
	public static final String TABLE_NAME = "CA_Commitment";
	public static final Object[][] TABLE_COLUMNS = {
			{ "commitmentId", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "organizationId", Types.VARCHAR },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "titleFI", Types.VARCHAR },
			{ "titleEN", Types.VARCHAR },
			{ "titleSV", Types.VARCHAR },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP },
			{ "updated", Types.TIMESTAMP },
			{ "created", Types.TIMESTAMP },
			{ "innovationFI", Types.VARCHAR },
			{ "innovationEN", Types.VARCHAR },
			{ "innovationSV", Types.VARCHAR },
			{ "backgroundInformationFI", Types.VARCHAR },
			{ "backgroundInformationEN", Types.VARCHAR },
			{ "backgroundInformationSV", Types.VARCHAR },
			{ "shortDescriptionFI", Types.VARCHAR },
			{ "shortDescriptionEN", Types.VARCHAR },
			{ "shortDescriptionSV", Types.VARCHAR },
			{ "address", Types.VARCHAR },
			{ "longitude", Types.DOUBLE },
			{ "latitude", Types.DOUBLE },
			{ "commitmentType", Types.VARCHAR },
			{ "status", Types.VARCHAR },
			{ "likes", Types.INTEGER },
			{ "joined", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("commitmentId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("organizationId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("titleFI", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("titleEN", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("titleSV", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("updated", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("created", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("innovationFI", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("innovationEN", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("innovationSV", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("backgroundInformationFI", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("backgroundInformationEN", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("backgroundInformationSV", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shortDescriptionFI", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shortDescriptionEN", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shortDescriptionSV", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("longitude", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("latitude", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("commitmentType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("likes", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("joined", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table CA_Commitment (commitmentId VARCHAR(75) not null primary key,groupId LONG,companyId LONG,organizationId VARCHAR(75) null,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,titleFI STRING null,titleEN STRING null,titleSV STRING null,startDate DATE null,endDate DATE null,updated DATE null,created DATE null,innovationFI STRING null,innovationEN STRING null,innovationSV STRING null,backgroundInformationFI STRING null,backgroundInformationEN STRING null,backgroundInformationSV STRING null,shortDescriptionFI STRING null,shortDescriptionEN STRING null,shortDescriptionSV STRING null,address STRING null,longitude DOUBLE,latitude DOUBLE,commitmentType VARCHAR(75) null,status VARCHAR(75) null,likes INTEGER,joined INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table CA_Commitment";
	public static final String ORDER_BY_JPQL = " ORDER BY commitment.commitmentId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CA_Commitment.commitmentId ASC";
	public static final String DATA_SOURCE = "caDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(fi.weasel.commitment2050.commitmentanalysis.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.fi.weasel.commitment2050.commitmentanalysis.model.Commitment"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(fi.weasel.commitment2050.commitmentanalysis.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.fi.weasel.commitment2050.commitmentanalysis.model.Commitment"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(fi.weasel.commitment2050.commitmentanalysis.service.util.ServiceProps.get(
				"lock.expiration.time.fi.weasel.commitment2050.commitmentanalysis.model.Commitment"));

	public CommitmentModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _commitmentId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setCommitmentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _commitmentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Commitment.class;
	}

	@Override
	public String getModelClassName() {
		return Commitment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("commitmentId", getCommitmentId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("organizationId", getOrganizationId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("titleFI", getTitleFI());
		attributes.put("titleEN", getTitleEN());
		attributes.put("titleSV", getTitleSV());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());
		attributes.put("updated", getUpdated());
		attributes.put("created", getCreated());
		attributes.put("innovationFI", getInnovationFI());
		attributes.put("innovationEN", getInnovationEN());
		attributes.put("innovationSV", getInnovationSV());
		attributes.put("backgroundInformationFI", getBackgroundInformationFI());
		attributes.put("backgroundInformationEN", getBackgroundInformationEN());
		attributes.put("backgroundInformationSV", getBackgroundInformationSV());
		attributes.put("shortDescriptionFI", getShortDescriptionFI());
		attributes.put("shortDescriptionEN", getShortDescriptionEN());
		attributes.put("shortDescriptionSV", getShortDescriptionSV());
		attributes.put("address", getAddress());
		attributes.put("longitude", getLongitude());
		attributes.put("latitude", getLatitude());
		attributes.put("commitmentType", getCommitmentType());
		attributes.put("status", getStatus());
		attributes.put("likes", getLikes());
		attributes.put("joined", getJoined());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String commitmentId = (String)attributes.get("commitmentId");

		if (commitmentId != null) {
			setCommitmentId(commitmentId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String organizationId = (String)attributes.get("organizationId");

		if (organizationId != null) {
			setOrganizationId(organizationId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String titleFI = (String)attributes.get("titleFI");

		if (titleFI != null) {
			setTitleFI(titleFI);
		}

		String titleEN = (String)attributes.get("titleEN");

		if (titleEN != null) {
			setTitleEN(titleEN);
		}

		String titleSV = (String)attributes.get("titleSV");

		if (titleSV != null) {
			setTitleSV(titleSV);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		Date updated = (Date)attributes.get("updated");

		if (updated != null) {
			setUpdated(updated);
		}

		Date created = (Date)attributes.get("created");

		if (created != null) {
			setCreated(created);
		}

		String innovationFI = (String)attributes.get("innovationFI");

		if (innovationFI != null) {
			setInnovationFI(innovationFI);
		}

		String innovationEN = (String)attributes.get("innovationEN");

		if (innovationEN != null) {
			setInnovationEN(innovationEN);
		}

		String innovationSV = (String)attributes.get("innovationSV");

		if (innovationSV != null) {
			setInnovationSV(innovationSV);
		}

		String backgroundInformationFI = (String)attributes.get(
				"backgroundInformationFI");

		if (backgroundInformationFI != null) {
			setBackgroundInformationFI(backgroundInformationFI);
		}

		String backgroundInformationEN = (String)attributes.get(
				"backgroundInformationEN");

		if (backgroundInformationEN != null) {
			setBackgroundInformationEN(backgroundInformationEN);
		}

		String backgroundInformationSV = (String)attributes.get(
				"backgroundInformationSV");

		if (backgroundInformationSV != null) {
			setBackgroundInformationSV(backgroundInformationSV);
		}

		String shortDescriptionFI = (String)attributes.get("shortDescriptionFI");

		if (shortDescriptionFI != null) {
			setShortDescriptionFI(shortDescriptionFI);
		}

		String shortDescriptionEN = (String)attributes.get("shortDescriptionEN");

		if (shortDescriptionEN != null) {
			setShortDescriptionEN(shortDescriptionEN);
		}

		String shortDescriptionSV = (String)attributes.get("shortDescriptionSV");

		if (shortDescriptionSV != null) {
			setShortDescriptionSV(shortDescriptionSV);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}

		Double longitude = (Double)attributes.get("longitude");

		if (longitude != null) {
			setLongitude(longitude);
		}

		Double latitude = (Double)attributes.get("latitude");

		if (latitude != null) {
			setLatitude(latitude);
		}

		String commitmentType = (String)attributes.get("commitmentType");

		if (commitmentType != null) {
			setCommitmentType(commitmentType);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Integer likes = (Integer)attributes.get("likes");

		if (likes != null) {
			setLikes(likes);
		}

		Integer joined = (Integer)attributes.get("joined");

		if (joined != null) {
			setJoined(joined);
		}
	}

	@Override
	public String getCommitmentId() {
		if (_commitmentId == null) {
			return StringPool.BLANK;
		}
		else {
			return _commitmentId;
		}
	}

	@Override
	public void setCommitmentId(String commitmentId) {
		_commitmentId = commitmentId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public String getOrganizationId() {
		if (_organizationId == null) {
			return StringPool.BLANK;
		}
		else {
			return _organizationId;
		}
	}

	@Override
	public void setOrganizationId(String organizationId) {
		_organizationId = organizationId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getTitleFI() {
		if (_titleFI == null) {
			return StringPool.BLANK;
		}
		else {
			return _titleFI;
		}
	}

	@Override
	public void setTitleFI(String titleFI) {
		_titleFI = titleFI;
	}

	@Override
	public String getTitleEN() {
		if (_titleEN == null) {
			return StringPool.BLANK;
		}
		else {
			return _titleEN;
		}
	}

	@Override
	public void setTitleEN(String titleEN) {
		_titleEN = titleEN;
	}

	@Override
	public String getTitleSV() {
		if (_titleSV == null) {
			return StringPool.BLANK;
		}
		else {
			return _titleSV;
		}
	}

	@Override
	public void setTitleSV(String titleSV) {
		_titleSV = titleSV;
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@Override
	public Date getUpdated() {
		return _updated;
	}

	@Override
	public void setUpdated(Date updated) {
		_updated = updated;
	}

	@Override
	public Date getCreated() {
		return _created;
	}

	@Override
	public void setCreated(Date created) {
		_created = created;
	}

	@Override
	public String getInnovationFI() {
		if (_innovationFI == null) {
			return StringPool.BLANK;
		}
		else {
			return _innovationFI;
		}
	}

	@Override
	public void setInnovationFI(String innovationFI) {
		_innovationFI = innovationFI;
	}

	@Override
	public String getInnovationEN() {
		if (_innovationEN == null) {
			return StringPool.BLANK;
		}
		else {
			return _innovationEN;
		}
	}

	@Override
	public void setInnovationEN(String innovationEN) {
		_innovationEN = innovationEN;
	}

	@Override
	public String getInnovationSV() {
		if (_innovationSV == null) {
			return StringPool.BLANK;
		}
		else {
			return _innovationSV;
		}
	}

	@Override
	public void setInnovationSV(String innovationSV) {
		_innovationSV = innovationSV;
	}

	@Override
	public String getBackgroundInformationFI() {
		if (_backgroundInformationFI == null) {
			return StringPool.BLANK;
		}
		else {
			return _backgroundInformationFI;
		}
	}

	@Override
	public void setBackgroundInformationFI(String backgroundInformationFI) {
		_backgroundInformationFI = backgroundInformationFI;
	}

	@Override
	public String getBackgroundInformationEN() {
		if (_backgroundInformationEN == null) {
			return StringPool.BLANK;
		}
		else {
			return _backgroundInformationEN;
		}
	}

	@Override
	public void setBackgroundInformationEN(String backgroundInformationEN) {
		_backgroundInformationEN = backgroundInformationEN;
	}

	@Override
	public String getBackgroundInformationSV() {
		if (_backgroundInformationSV == null) {
			return StringPool.BLANK;
		}
		else {
			return _backgroundInformationSV;
		}
	}

	@Override
	public void setBackgroundInformationSV(String backgroundInformationSV) {
		_backgroundInformationSV = backgroundInformationSV;
	}

	@Override
	public String getShortDescriptionFI() {
		if (_shortDescriptionFI == null) {
			return StringPool.BLANK;
		}
		else {
			return _shortDescriptionFI;
		}
	}

	@Override
	public void setShortDescriptionFI(String shortDescriptionFI) {
		_shortDescriptionFI = shortDescriptionFI;
	}

	@Override
	public String getShortDescriptionEN() {
		if (_shortDescriptionEN == null) {
			return StringPool.BLANK;
		}
		else {
			return _shortDescriptionEN;
		}
	}

	@Override
	public void setShortDescriptionEN(String shortDescriptionEN) {
		_shortDescriptionEN = shortDescriptionEN;
	}

	@Override
	public String getShortDescriptionSV() {
		if (_shortDescriptionSV == null) {
			return StringPool.BLANK;
		}
		else {
			return _shortDescriptionSV;
		}
	}

	@Override
	public void setShortDescriptionSV(String shortDescriptionSV) {
		_shortDescriptionSV = shortDescriptionSV;
	}

	@Override
	public String getAddress() {
		if (_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@Override
	public double getLongitude() {
		return _longitude;
	}

	@Override
	public void setLongitude(double longitude) {
		_longitude = longitude;
	}

	@Override
	public double getLatitude() {
		return _latitude;
	}

	@Override
	public void setLatitude(double latitude) {
		_latitude = latitude;
	}

	@Override
	public String getCommitmentType() {
		if (_commitmentType == null) {
			return StringPool.BLANK;
		}
		else {
			return _commitmentType;
		}
	}

	@Override
	public void setCommitmentType(String commitmentType) {
		_commitmentType = commitmentType;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	@Override
	public int getLikes() {
		return _likes;
	}

	@Override
	public void setLikes(int likes) {
		_likes = likes;
	}

	@Override
	public int getJoined() {
		return _joined;
	}

	@Override
	public void setJoined(int joined) {
		_joined = joined;
	}

	@Override
	public Commitment toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Commitment)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CommitmentImpl commitmentImpl = new CommitmentImpl();

		commitmentImpl.setCommitmentId(getCommitmentId());
		commitmentImpl.setGroupId(getGroupId());
		commitmentImpl.setCompanyId(getCompanyId());
		commitmentImpl.setOrganizationId(getOrganizationId());
		commitmentImpl.setUserId(getUserId());
		commitmentImpl.setUserName(getUserName());
		commitmentImpl.setCreateDate(getCreateDate());
		commitmentImpl.setModifiedDate(getModifiedDate());
		commitmentImpl.setTitleFI(getTitleFI());
		commitmentImpl.setTitleEN(getTitleEN());
		commitmentImpl.setTitleSV(getTitleSV());
		commitmentImpl.setStartDate(getStartDate());
		commitmentImpl.setEndDate(getEndDate());
		commitmentImpl.setUpdated(getUpdated());
		commitmentImpl.setCreated(getCreated());
		commitmentImpl.setInnovationFI(getInnovationFI());
		commitmentImpl.setInnovationEN(getInnovationEN());
		commitmentImpl.setInnovationSV(getInnovationSV());
		commitmentImpl.setBackgroundInformationFI(getBackgroundInformationFI());
		commitmentImpl.setBackgroundInformationEN(getBackgroundInformationEN());
		commitmentImpl.setBackgroundInformationSV(getBackgroundInformationSV());
		commitmentImpl.setShortDescriptionFI(getShortDescriptionFI());
		commitmentImpl.setShortDescriptionEN(getShortDescriptionEN());
		commitmentImpl.setShortDescriptionSV(getShortDescriptionSV());
		commitmentImpl.setAddress(getAddress());
		commitmentImpl.setLongitude(getLongitude());
		commitmentImpl.setLatitude(getLatitude());
		commitmentImpl.setCommitmentType(getCommitmentType());
		commitmentImpl.setStatus(getStatus());
		commitmentImpl.setLikes(getLikes());
		commitmentImpl.setJoined(getJoined());

		commitmentImpl.resetOriginalValues();

		return commitmentImpl;
	}

	@Override
	public int compareTo(Commitment commitment) {
		String primaryKey = commitment.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Commitment)) {
			return false;
		}

		Commitment commitment = (Commitment)obj;

		String primaryKey = commitment.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CommitmentModelImpl commitmentModelImpl = this;

		commitmentModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<Commitment> toCacheModel() {
		CommitmentCacheModel commitmentCacheModel = new CommitmentCacheModel();

		commitmentCacheModel.commitmentId = getCommitmentId();

		String commitmentId = commitmentCacheModel.commitmentId;

		if ((commitmentId != null) && (commitmentId.length() == 0)) {
			commitmentCacheModel.commitmentId = null;
		}

		commitmentCacheModel.groupId = getGroupId();

		commitmentCacheModel.companyId = getCompanyId();

		commitmentCacheModel.organizationId = getOrganizationId();

		String organizationId = commitmentCacheModel.organizationId;

		if ((organizationId != null) && (organizationId.length() == 0)) {
			commitmentCacheModel.organizationId = null;
		}

		commitmentCacheModel.userId = getUserId();

		commitmentCacheModel.userName = getUserName();

		String userName = commitmentCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			commitmentCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			commitmentCacheModel.createDate = createDate.getTime();
		}
		else {
			commitmentCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			commitmentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			commitmentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		commitmentCacheModel.titleFI = getTitleFI();

		String titleFI = commitmentCacheModel.titleFI;

		if ((titleFI != null) && (titleFI.length() == 0)) {
			commitmentCacheModel.titleFI = null;
		}

		commitmentCacheModel.titleEN = getTitleEN();

		String titleEN = commitmentCacheModel.titleEN;

		if ((titleEN != null) && (titleEN.length() == 0)) {
			commitmentCacheModel.titleEN = null;
		}

		commitmentCacheModel.titleSV = getTitleSV();

		String titleSV = commitmentCacheModel.titleSV;

		if ((titleSV != null) && (titleSV.length() == 0)) {
			commitmentCacheModel.titleSV = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			commitmentCacheModel.startDate = startDate.getTime();
		}
		else {
			commitmentCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			commitmentCacheModel.endDate = endDate.getTime();
		}
		else {
			commitmentCacheModel.endDate = Long.MIN_VALUE;
		}

		Date updated = getUpdated();

		if (updated != null) {
			commitmentCacheModel.updated = updated.getTime();
		}
		else {
			commitmentCacheModel.updated = Long.MIN_VALUE;
		}

		Date created = getCreated();

		if (created != null) {
			commitmentCacheModel.created = created.getTime();
		}
		else {
			commitmentCacheModel.created = Long.MIN_VALUE;
		}

		commitmentCacheModel.innovationFI = getInnovationFI();

		String innovationFI = commitmentCacheModel.innovationFI;

		if ((innovationFI != null) && (innovationFI.length() == 0)) {
			commitmentCacheModel.innovationFI = null;
		}

		commitmentCacheModel.innovationEN = getInnovationEN();

		String innovationEN = commitmentCacheModel.innovationEN;

		if ((innovationEN != null) && (innovationEN.length() == 0)) {
			commitmentCacheModel.innovationEN = null;
		}

		commitmentCacheModel.innovationSV = getInnovationSV();

		String innovationSV = commitmentCacheModel.innovationSV;

		if ((innovationSV != null) && (innovationSV.length() == 0)) {
			commitmentCacheModel.innovationSV = null;
		}

		commitmentCacheModel.backgroundInformationFI = getBackgroundInformationFI();

		String backgroundInformationFI = commitmentCacheModel.backgroundInformationFI;

		if ((backgroundInformationFI != null) &&
				(backgroundInformationFI.length() == 0)) {
			commitmentCacheModel.backgroundInformationFI = null;
		}

		commitmentCacheModel.backgroundInformationEN = getBackgroundInformationEN();

		String backgroundInformationEN = commitmentCacheModel.backgroundInformationEN;

		if ((backgroundInformationEN != null) &&
				(backgroundInformationEN.length() == 0)) {
			commitmentCacheModel.backgroundInformationEN = null;
		}

		commitmentCacheModel.backgroundInformationSV = getBackgroundInformationSV();

		String backgroundInformationSV = commitmentCacheModel.backgroundInformationSV;

		if ((backgroundInformationSV != null) &&
				(backgroundInformationSV.length() == 0)) {
			commitmentCacheModel.backgroundInformationSV = null;
		}

		commitmentCacheModel.shortDescriptionFI = getShortDescriptionFI();

		String shortDescriptionFI = commitmentCacheModel.shortDescriptionFI;

		if ((shortDescriptionFI != null) && (shortDescriptionFI.length() == 0)) {
			commitmentCacheModel.shortDescriptionFI = null;
		}

		commitmentCacheModel.shortDescriptionEN = getShortDescriptionEN();

		String shortDescriptionEN = commitmentCacheModel.shortDescriptionEN;

		if ((shortDescriptionEN != null) && (shortDescriptionEN.length() == 0)) {
			commitmentCacheModel.shortDescriptionEN = null;
		}

		commitmentCacheModel.shortDescriptionSV = getShortDescriptionSV();

		String shortDescriptionSV = commitmentCacheModel.shortDescriptionSV;

		if ((shortDescriptionSV != null) && (shortDescriptionSV.length() == 0)) {
			commitmentCacheModel.shortDescriptionSV = null;
		}

		commitmentCacheModel.address = getAddress();

		String address = commitmentCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			commitmentCacheModel.address = null;
		}

		commitmentCacheModel.longitude = getLongitude();

		commitmentCacheModel.latitude = getLatitude();

		commitmentCacheModel.commitmentType = getCommitmentType();

		String commitmentType = commitmentCacheModel.commitmentType;

		if ((commitmentType != null) && (commitmentType.length() == 0)) {
			commitmentCacheModel.commitmentType = null;
		}

		commitmentCacheModel.status = getStatus();

		String status = commitmentCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			commitmentCacheModel.status = null;
		}

		commitmentCacheModel.likes = getLikes();

		commitmentCacheModel.joined = getJoined();

		return commitmentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(63);

		sb.append("{commitmentId=");
		sb.append(getCommitmentId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", organizationId=");
		sb.append(getOrganizationId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", titleFI=");
		sb.append(getTitleFI());
		sb.append(", titleEN=");
		sb.append(getTitleEN());
		sb.append(", titleSV=");
		sb.append(getTitleSV());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", updated=");
		sb.append(getUpdated());
		sb.append(", created=");
		sb.append(getCreated());
		sb.append(", innovationFI=");
		sb.append(getInnovationFI());
		sb.append(", innovationEN=");
		sb.append(getInnovationEN());
		sb.append(", innovationSV=");
		sb.append(getInnovationSV());
		sb.append(", backgroundInformationFI=");
		sb.append(getBackgroundInformationFI());
		sb.append(", backgroundInformationEN=");
		sb.append(getBackgroundInformationEN());
		sb.append(", backgroundInformationSV=");
		sb.append(getBackgroundInformationSV());
		sb.append(", shortDescriptionFI=");
		sb.append(getShortDescriptionFI());
		sb.append(", shortDescriptionEN=");
		sb.append(getShortDescriptionEN());
		sb.append(", shortDescriptionSV=");
		sb.append(getShortDescriptionSV());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", longitude=");
		sb.append(getLongitude());
		sb.append(", latitude=");
		sb.append(getLatitude());
		sb.append(", commitmentType=");
		sb.append(getCommitmentType());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", likes=");
		sb.append(getLikes());
		sb.append(", joined=");
		sb.append(getJoined());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(97);

		sb.append("<model><model-name>");
		sb.append(
			"fi.weasel.commitment2050.commitmentanalysis.model.Commitment");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>commitmentId</column-name><column-value><![CDATA[");
		sb.append(getCommitmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organizationId</column-name><column-value><![CDATA[");
		sb.append(getOrganizationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>titleFI</column-name><column-value><![CDATA[");
		sb.append(getTitleFI());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>titleEN</column-name><column-value><![CDATA[");
		sb.append(getTitleEN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>titleSV</column-name><column-value><![CDATA[");
		sb.append(getTitleSV());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updated</column-name><column-value><![CDATA[");
		sb.append(getUpdated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>created</column-name><column-value><![CDATA[");
		sb.append(getCreated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>innovationFI</column-name><column-value><![CDATA[");
		sb.append(getInnovationFI());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>innovationEN</column-name><column-value><![CDATA[");
		sb.append(getInnovationEN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>innovationSV</column-name><column-value><![CDATA[");
		sb.append(getInnovationSV());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>backgroundInformationFI</column-name><column-value><![CDATA[");
		sb.append(getBackgroundInformationFI());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>backgroundInformationEN</column-name><column-value><![CDATA[");
		sb.append(getBackgroundInformationEN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>backgroundInformationSV</column-name><column-value><![CDATA[");
		sb.append(getBackgroundInformationSV());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shortDescriptionFI</column-name><column-value><![CDATA[");
		sb.append(getShortDescriptionFI());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shortDescriptionEN</column-name><column-value><![CDATA[");
		sb.append(getShortDescriptionEN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shortDescriptionSV</column-name><column-value><![CDATA[");
		sb.append(getShortDescriptionSV());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>longitude</column-name><column-value><![CDATA[");
		sb.append(getLongitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>latitude</column-name><column-value><![CDATA[");
		sb.append(getLatitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commitmentType</column-name><column-value><![CDATA[");
		sb.append(getCommitmentType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>likes</column-name><column-value><![CDATA[");
		sb.append(getLikes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>joined</column-name><column-value><![CDATA[");
		sb.append(getJoined());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Commitment.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Commitment.class
		};
	private String _commitmentId;
	private long _groupId;
	private long _companyId;
	private String _organizationId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _titleFI;
	private String _titleEN;
	private String _titleSV;
	private Date _startDate;
	private Date _endDate;
	private Date _updated;
	private Date _created;
	private String _innovationFI;
	private String _innovationEN;
	private String _innovationSV;
	private String _backgroundInformationFI;
	private String _backgroundInformationEN;
	private String _backgroundInformationSV;
	private String _shortDescriptionFI;
	private String _shortDescriptionEN;
	private String _shortDescriptionSV;
	private String _address;
	private double _longitude;
	private double _latitude;
	private String _commitmentType;
	private String _status;
	private int _likes;
	private int _joined;
	private Commitment _escapedModel;
}